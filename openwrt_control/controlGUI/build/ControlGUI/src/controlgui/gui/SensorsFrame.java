/*
 * SensorsFrame.java
 *
 * Created on March 16, 2008, 9:26 AM
 */

package controlgui.gui;

import controlgui.com.RemoteCommand;
import controlgui.data.SensorsData;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author  kshaw
 */
public class SensorsFrame extends javax.swing.JFrame {
    
    private RemoteCommand remoteCommand;
    private PollSensors pollThread;
    private SensorsData sensorsData;
    
    /** Creates new form SensorsFrame */
    public SensorsFrame(RemoteCommand remoteCommand) {
        this.remoteCommand = remoteCommand;
        sensorsData = new SensorsData();
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        readSensorsButton = new javax.swing.JButton();
        pollCheckBox = new javax.swing.JCheckBox();
        pollInterval = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        stopButton = new javax.swing.JButton();
        irSensorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sensors");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        readSensorsButton.setText("Read Sensors");
        readSensorsButton.setActionCommand("readSensors");
        readSensorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readSensorsButtonActionPerformed(evt);
            }
        });

        pollCheckBox.setText("Poll");

        pollInterval.setText("1000");

        jLabel1.setText("Interval:");

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        irSensorButton.setText("IR Sensor");
        irSensorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                irSensorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(irSensorButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(readSensorsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(pollCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pollInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(stopButton)
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pollCheckBox)
                        .addComponent(jLabel1)
                        .addComponent(pollInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(stopButton))
                    .addComponent(readSensorsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(irSensorButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void readSensorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readSensorsButtonActionPerformed
        if (pollThread != null) {
            pollThread.exit();
        }
        pollThread = new PollSensors();
        pollThread.start();
}//GEN-LAST:event_readSensorsButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if(pollThread != null){
            pollThread.exit();
            pollThread = null;
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void irSensorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_irSensorButtonActionPerformed
        try {
            String result = remoteCommand.irSensor();
            jTextArea1.setText(jTextArea1.getText() + result + "\r\n");//GEN-LAST:event_irSensorButtonActionPerformed
        } catch (IOException ex) {
            Logger.getLogger(SensorsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton irSensorButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JCheckBox pollCheckBox;
    private javax.swing.JTextField pollInterval;
    private javax.swing.JButton readSensorsButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
    
    private void readSensors(){
        try {
            String result = remoteCommand.sensors();
            System.out.println(result);
            String display = result;
            if(sensorsData.initialize(result)){
                display = sensorsData.toString();
            }             
            jTextArea1.setText(jTextArea1.getText() + display + "\r\n");
        } catch (IOException ex) {
            Logger.getLogger(SensorsFrame.class.getName()).log(Level.SEVERE, null, ex);
            jTextArea1.setText(jTextArea1.getText() + ex.getMessage() + "\r\n");
        }        
    }
    
    private class PollSensors extends Thread {
        private boolean done = false;
        public void run(){
            System.out.println("Polling Sensors");
            long interval = Long.parseLong(pollInterval.getText());
            while(!done){
                try {
                    readSensors();
                    if(!pollCheckBox.isSelected()){
                        done = true;
                    } else {
                        Thread.sleep(interval);
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(SensorsFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        public void exit(){
            done = true;
        }
    }
}
