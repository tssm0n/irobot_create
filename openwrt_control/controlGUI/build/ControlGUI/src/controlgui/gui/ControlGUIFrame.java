/*
 * ControlGUIFrame.java
 *
 * Created on October 25, 2007, 2:26 PM
 */

package controlgui.gui;

import controlgui.com.RemoteCommand;
import controlgui.gui.helpers.ConnectThread;
import controlgui.scripting.Script;
import controlgui.scripting.TestScript;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JSlider;

/**
 *
 * @author  tss
 */
public class ControlGUIFrame extends javax.swing.JFrame {
    
    private RemoteCommand remoteCommand;
    private MessageLogFrame messageLogFrame;
    private VideoFrame videoFrame;
    
    private boolean adjustedByButton = false;
    
    /** Creates new form ControlGUIFrame */
    public ControlGUIFrame() {
        initComponents();
        messageLogFrame = new MessageLogFrame();
        videoFrame = new VideoFrame();
        setVisible(true);
        checkConnection();
        connect();
        
        new MessageListener().start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        stopButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        messageLogButton = new javax.swing.JButton();
        videoButton = new javax.swing.JButton();
        connectButton = new javax.swing.JToggleButton();
        sensorsButton = new javax.swing.JButton();
        controlGuiTabPane = new javax.swing.JTabbedPane();
        drivePanel = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        driveButton = new javax.swing.JButton();
        velocity = new javax.swing.JTextField();
        radius = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        velocitySlider = new javax.swing.JSlider();
        radSlider = new javax.swing.JRadioButton();
        radStraight = new javax.swing.JRadioButton();
        radClockwise = new javax.swing.JRadioButton();
        radCounterCW = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        radiusSlider = new javax.swing.JSlider();
        driveDirectButton = new javax.swing.JButton();
        rightDrive = new javax.swing.JTextField();
        leftDrive = new javax.swing.JTextField();
        speedSlider = new javax.swing.JSlider();
        keyboardControlButton = new javax.swing.JButton();
        otherPanel = new javax.swing.JPanel();
        ledButton = new javax.swing.JButton();
        ledRadio1 = new javax.swing.JRadioButton();
        ledRadio2 = new javax.swing.JRadioButton();
        javax.swing.JButton cmLedButton = new javax.swing.JButton();
        exitServerButton = new javax.swing.JButton();
        cmLedButtonOff = new javax.swing.JButton();
        testScriptButton = new javax.swing.JButton();
        controlProgramPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        driveControlButton = new javax.swing.JButton();
        followWallControlButton = new javax.swing.JButton();
        driveProgramSpeed = new javax.swing.JSlider();
        driveProgramSpeedCheck = new javax.swing.JCheckBox();
        driveIncludeCustomSensors = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("iRobot Control");

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        messageLogButton.setText("Message Log");
        messageLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageLogButtonActionPerformed(evt);
            }
        });

        videoButton.setText("Video");
        videoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoButtonActionPerformed(evt);
            }
        });

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        sensorsButton.setText("Sensors");
        sensorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sensorsButtonActionPerformed(evt);
            }
        });

        driveButton.setText("Drive");
        driveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driveButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Velocity:");

        velocitySlider.setMajorTickSpacing(100);
        velocitySlider.setMaximum(500);
        velocitySlider.setMinimum(-500);
        velocitySlider.setPaintLabels(true);
        velocitySlider.setPaintTicks(true);
        velocitySlider.setValue(0);
        velocitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                velocitySliderStateChanged(evt);
            }
        });

        buttonGroup1.add(radSlider);
        radSlider.setText("Use Slider");
        radSlider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radSliderActionPerformed(evt);
            }
        });

        buttonGroup1.add(radStraight);
        radStraight.setText("Straight");
        radStraight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radStraightActionPerformed(evt);
            }
        });

        buttonGroup1.add(radClockwise);
        radClockwise.setText("Rotate Clockwise");
        radClockwise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radClockwiseActionPerformed(evt);
            }
        });

        buttonGroup1.add(radCounterCW);
        radCounterCW.setText("Rotate Counter Clockwise");
        radCounterCW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radCounterCWActionPerformed(evt);
            }
        });

        jLabel3.setText("Radius:");

        radiusSlider.setMajorTickSpacing(500);
        radiusSlider.setMaximum(2000);
        radiusSlider.setMinimum(-2000);
        radiusSlider.setPaintLabels(true);
        radiusSlider.setPaintTicks(true);
        radiusSlider.setValue(0);
        radiusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radiusSliderStateChanged(evt);
            }
        });

        driveDirectButton.setText("Drive Direct");
        driveDirectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driveDirectButtonActionPerformed(evt);
            }
        });

        speedSlider.setMajorTickSpacing(100);
        speedSlider.setMaximum(500);
        speedSlider.setMinimum(-500);
        speedSlider.setPaintLabels(true);
        speedSlider.setPaintTicks(true);
        speedSlider.setValue(0);
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });

        keyboardControlButton.setText("Keyboard Control");
        keyboardControlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyboardControlButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout drivePanelLayout = new org.jdesktop.layout.GroupLayout(drivePanel);
        drivePanel.setLayout(drivePanelLayout);
        drivePanelLayout.setHorizontalGroup(
            drivePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(drivePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(drivePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(drivePanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(driveDirectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rightDrive, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(leftDrive, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                        .add(166, 166, 166))
                    .add(drivePanelLayout.createSequentialGroup()
                        .add(speedSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                        .add(20, 20, 20))
                    .add(drivePanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(driveButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(velocity, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(radius, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(208, Short.MAX_VALUE))
                    .add(drivePanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(velocitySlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                        .add(41, 41, 41))
                    .add(drivePanelLayout.createSequentialGroup()
                        .add(jLabel3)
                        .addContainerGap(489, Short.MAX_VALUE))
                    .add(drivePanelLayout.createSequentialGroup()
                        .add(jLabel2)
                        .addContainerGap(484, Short.MAX_VALUE))
                    .add(drivePanelLayout.createSequentialGroup()
                        .add(radiusSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                        .add(40, 40, 40))))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
            .add(drivePanelLayout.createSequentialGroup()
                .add(38, 38, 38)
                .add(radSlider)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(radStraight)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(drivePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(keyboardControlButton)
                    .add(drivePanelLayout.createSequentialGroup()
                        .add(radClockwise)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(radCounterCW)))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        drivePanelLayout.setVerticalGroup(
            drivePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(drivePanelLayout.createSequentialGroup()
                .add(44, 44, 44)
                .add(drivePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rightDrive, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(leftDrive, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(driveDirectButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(speedSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(32, 32, 32)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(drivePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(driveButton)
                    .add(radius, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(velocity, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel2)
                .add(1, 1, 1)
                .add(velocitySlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(26, 26, 26)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(radiusSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(drivePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(radSlider)
                    .add(radStraight)
                    .add(radClockwise)
                    .add(radCounterCW))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 11, Short.MAX_VALUE)
                .add(keyboardControlButton)
                .addContainerGap())
        );

        controlGuiTabPane.addTab("Drive", drivePanel);

        ledButton.setText("Change LEDs");
        ledButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledButtonActionPerformed(evt);
            }
        });

        ledRadio1.setText("LED 1");
        ledRadio1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ledRadio1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ledRadio1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ledRadio1StateChanged(evt);
            }
        });

        ledRadio2.setText("LED 2");
        ledRadio2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ledRadio2.setMargin(new java.awt.Insets(0, 0, 0, 0));

        cmLedButton.setText("Control Module LED On");
        cmLedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmLedButtonActionPerformed(evt);
            }
        });

        exitServerButton.setText("Shutdown Server");
        exitServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitServerButtonActionPerformed(evt);
            }
        });

        cmLedButtonOff.setText("Control Module LED Off");
        cmLedButtonOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmLedButtonOffActionPerformed(evt);
            }
        });

        testScriptButton.setText("Run TestScript");
        testScriptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testScriptButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout otherPanelLayout = new org.jdesktop.layout.GroupLayout(otherPanel);
        otherPanel.setLayout(otherPanelLayout);
        otherPanelLayout.setHorizontalGroup(
            otherPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(otherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(otherPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, otherPanelLayout.createSequentialGroup()
                        .add(otherPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(otherPanelLayout.createSequentialGroup()
                                .add(ledButton)
                                .add(22, 22, 22)
                                .add(ledRadio1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(otherPanelLayout.createSequentialGroup()
                                .add(cmLedButton)
                                .add(25, 25, 25)))
                        .add(otherPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(exitServerButton)
                            .add(otherPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(otherPanelLayout.createSequentialGroup()
                                    .add(cmLedButtonOff)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, otherPanelLayout.createSequentialGroup()
                                    .add(ledRadio2)
                                    .add(305, 305, 305))))
                        .add(203, 203, 203))
                    .add(otherPanelLayout.createSequentialGroup()
                        .add(testScriptButton)
                        .addContainerGap(420, Short.MAX_VALUE))))
        );
        otherPanelLayout.setVerticalGroup(
            otherPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(otherPanelLayout.createSequentialGroup()
                .add(21, 21, 21)
                .add(otherPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ledRadio1)
                    .add(ledRadio2)
                    .add(ledButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(otherPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmLedButton)
                    .add(cmLedButtonOff))
                .add(28, 28, 28)
                .add(testScriptButton)
                .add(74, 74, 74)
                .add(exitServerButton)
                .addContainerGap(203, Short.MAX_VALUE))
        );

        controlGuiTabPane.addTab("Other", otherPanel);

        jLabel1.setText("Control Programs:");

        driveControlButton.setText("Drive");
        driveControlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driveControlButtonActionPerformed(evt);
            }
        });

        followWallControlButton.setText("Follow Wall");
        followWallControlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followWallControlButtonActionPerformed(evt);
            }
        });

        driveProgramSpeed.setMajorTickSpacing(50);
        driveProgramSpeed.setMaximum(500);
        driveProgramSpeed.setPaintLabels(true);
        driveProgramSpeed.setPaintTicks(true);
        driveProgramSpeed.setValue(300);
        driveProgramSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                driveProgramSpeedStateChanged(evt);
            }
        });

        driveProgramSpeedCheck.setText("Custom Parameters");

        driveIncludeCustomSensors.setText("Include Custom Sensors");
        driveIncludeCustomSensors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driveIncludeCustomSensorsActionPerformed(evt);
            }
        });

        jLabel4.setText("Speed:");

        org.jdesktop.layout.GroupLayout controlProgramPanelLayout = new org.jdesktop.layout.GroupLayout(controlProgramPanel);
        controlProgramPanel.setLayout(controlProgramPanelLayout);
        controlProgramPanelLayout.setHorizontalGroup(
            controlProgramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, controlProgramPanelLayout.createSequentialGroup()
                .add(controlProgramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, controlProgramPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1)
                        .add(18, 18, 18)
                        .add(controlProgramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(followWallControlButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(driveControlButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(53, 53, 53))
                    .add(controlProgramPanelLayout.createSequentialGroup()
                        .add(44, 44, 44)
                        .add(driveIncludeCustomSensors)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jLabel4)
                        .add(10, 10, 10)))
                .add(controlProgramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(driveProgramSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 242, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(driveProgramSpeedCheck))
                .addContainerGap())
        );
        controlProgramPanelLayout.setVerticalGroup(
            controlProgramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(controlProgramPanelLayout.createSequentialGroup()
                .add(19, 19, 19)
                .add(controlProgramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(driveControlButton)
                    .add(driveProgramSpeedCheck))
                .add(14, 14, 14)
                .add(controlProgramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(driveProgramSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(controlProgramPanelLayout.createSequentialGroup()
                        .add(1, 1, 1)
                        .add(controlProgramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(driveIncludeCustomSensors)
                            .add(jLabel4))
                        .add(18, 18, 18)
                        .add(followWallControlButton)))
                .addContainerGap(308, Short.MAX_VALUE))
        );

        controlGuiTabPane.addTab("ControlPrograms", controlProgramPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(controlGuiTabPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(111, 111, 111)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, stopButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, exitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(messageLogButton)
                        .add(32, 32, 32)
                        .add(sensorsButton)))
                .add(29, 29, 29)
                .add(videoButton)
                .addContainerGap(137, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(206, 206, 206)
                .add(connectButton)
                .addContainerGap(261, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(connectButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(controlGuiTabPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 454, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(sensorsButton)
                    .add(messageLogButton)
                    .add(videoButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
                .add(stopButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(exitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        connectButton.getAccessibleContext().setAccessibleName("connect");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void videoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_videoButtonActionPerformed
        videoFrame.setVisible(true);
    }//GEN-LAST:event_videoButtonActionPerformed

    private void messageLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageLogButtonActionPerformed
        messageLogFrame.setVisible(true);
    }//GEN-LAST:event_messageLogButtonActionPerformed

    private void followWallControlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_followWallControlButtonActionPerformed
        try {
            remoteCommand.followWall();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_followWallControlButtonActionPerformed

    private void driveControlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driveControlButtonActionPerformed
        try {
            if(!driveProgramSpeedCheck.isSelected()){
                remoteCommand.driveProgram();
            } else {
                int customSensors = driveIncludeCustomSensors.isSelected() ? 1 : 0;
                remoteCommand.driveProgramCustom((short) driveProgramSpeed.getValue(), (short) customSensors);
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_driveControlButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        try {
            remoteCommand.stop();
                            
            leftDrive.setText("0");
            rightDrive.setText("0");   
            speedSlider.setValue(0);
            
            velocity.setText("0");
            velocitySlider.setValue(0);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void driveDirectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driveDirectButtonActionPerformed
        short ri = 0;
        short le = 0;
        if(rightDrive.getText().length() > 0){
            ri = Short.parseShort(rightDrive.getText());
        }
        
        if(leftDrive.getText().length() > 0){
            le = Short.parseShort(leftDrive.getText());
        }
        try {
            
            remoteCommand.driveDirect(ri, le);
            
            speedSlider.setValue(ri);            
        } catch (IOException ex) {
            ex.printStackTrace();
        }        
    }//GEN-LAST:event_driveDirectButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        try {
            if(remoteCommand != null){
                remoteCommand.close();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void driveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driveButtonActionPerformed
        short vel = 0;
        short rad = 0;
        if(velocity.getText().length() > 0){
            vel = Short.parseShort(velocity.getText());
        }
        
        if(radius.getText().length() > 0){
            rad = Short.parseShort(radius.getText());
        }
        try {
            
            remoteCommand.drive(vel, rad);
            
            velocitySlider.setValue(vel);
            radiusSlider.setValue(rad);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_driveButtonActionPerformed

    private void ledButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledButtonActionPerformed
        short param1 = 0;
        short param2 = 0;
        if(ledRadio1.isSelected()){
            param1 = 1;
        }
        if(ledRadio2.isSelected()){
            param2 = 1;
        }
        try {
            remoteCommand.changeLeds(param1, param2);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ledButtonActionPerformed

    private void ledRadio1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ledRadio1StateChanged
      
    }//GEN-LAST:event_ledRadio1StateChanged

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if(remoteCommand == null){
            remoteCommand = new RemoteCommand();
        }
        if(!connectButton.isSelected()){
            try {
                remoteCommand.close();
            } catch (IOException ex) {
                Logger.getLogger(ControlGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            connect();
        }
        checkConnection();
}//GEN-LAST:event_connectButtonActionPerformed

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            try {
                short speedVal = (short) source.getValue();
                remoteCommand.driveDirect(speedVal, speedVal);
                String speedStr = Short.toString(speedVal);
                leftDrive.setText(speedStr);
                rightDrive.setText(speedStr);
            } catch (IOException ex) {
                Logger.getLogger(ControlGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
                messageLogFrame.updateMessageLog("Error Adjusting Direct Speed: " + ex.getMessage());
            }
        }
}//GEN-LAST:event_speedSliderStateChanged

    private void velocitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_velocitySliderStateChanged
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            updateDriveFromSliders();
        }
    }//GEN-LAST:event_velocitySliderStateChanged

    private void radiusSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radiusSliderStateChanged
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            updateDriveFromSliders();
            if(!adjustedByButton){
                radSlider.setSelected(true);
            }
            adjustedByButton = false;
        }
    }//GEN-LAST:event_radiusSliderStateChanged

    private void sensorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorsButtonActionPerformed
        SensorsFrame sensorsFrame = new SensorsFrame(remoteCommand);
        sensorsFrame.setVisible(true);
    }//GEN-LAST:event_sensorsButtonActionPerformed

    private void cmLedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmLedButtonActionPerformed
        try {
            remoteCommand.cmLedsOn();//GEN-LAST:event_cmLedButtonActionPerformed
        } catch (IOException ex) {
            Logger.getLogger(ControlGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}

    private void radStraightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radStraightActionPerformed
        updateRadiusInput();
}//GEN-LAST:event_radStraightActionPerformed

    private void radSliderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radSliderActionPerformed
        updateRadiusInput();
    }//GEN-LAST:event_radSliderActionPerformed

    private void radClockwiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radClockwiseActionPerformed
        updateRadiusInput();
    }//GEN-LAST:event_radClockwiseActionPerformed

    private void radCounterCWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radCounterCWActionPerformed
        updateRadiusInput();
    }//GEN-LAST:event_radCounterCWActionPerformed

    private void exitServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitServerButtonActionPerformed
        try {
            int result = JOptionPane.showConfirmDialog(this, 
                    "Are you sure you would like the remote server to terminate?", 
                    "Confirm", JOptionPane.YES_NO_OPTION);
            if(result == 0){            
                remoteCommand.exitProgram();
                remoteCommand.close();
                checkConnection();
            }     
        } catch (IOException ex) {
            Logger.getLogger(ControlGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
}//GEN-LAST:event_exitServerButtonActionPerformed

    private void keyboardControlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyboardControlButtonActionPerformed
        new KeyboardControlFrame(remoteCommand).setVisible(true);
    }//GEN-LAST:event_keyboardControlButtonActionPerformed

    private void cmLedButtonOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmLedButtonOffActionPerformed
        try {
            remoteCommand.cmLedsOff();                                           
        } catch (IOException ex) {
            Logger.getLogger(ControlGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmLedButtonOffActionPerformed

    private void driveProgramSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_driveProgramSpeedStateChanged
        driveProgramSpeedCheck.setSelected(true);
    }//GEN-LAST:event_driveProgramSpeedStateChanged

    private void testScriptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testScriptButtonActionPerformed
        Script testScript = new TestScript("Test Script", remoteCommand);
        testScript.execute();
    }//GEN-LAST:event_testScriptButtonActionPerformed

    private void driveIncludeCustomSensorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driveIncludeCustomSensorsActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_driveIncludeCustomSensorsActionPerformed
    
    private void checkConnection(){
        if(remoteCommand == null || !remoteCommand.isConnected()){
            connectButton.setSelected(false);
            connectButton.setText("Not Connected");
        } else {
            connectButton.setSelected(true);
            connectButton.setText("Connected");
        }
    }
    
    private void connect(){
        ConnectThread connectThread = new ConnectThread(remoteCommand);        
        connectThread.start();
        
        ConnectJFrame connectJFrame = new ConnectJFrame();      
        connectJFrame.setVisible(true); 
        while(!connectThread.isComplete()){
            try {                     
                    connectJFrame.increment();
                Thread.sleep(200);
            } catch (InterruptedException ex) {
                Logger.getLogger(ControlGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        remoteCommand = connectThread.getRemoteCommand();
        connectJFrame.dispose();
        checkConnection();
        if(remoteCommand == null){
            JOptionPane.showMessageDialog(null, "Failed To Connect To The Server");
        }
    }
    
    private void updateRadiusInput(){
        if(radSlider.isSelected()){
            updateDriveFromSliders();
        } else if(radStraight.isSelected()) {
            updateRadius((short) 32767);
        } else if(radClockwise.isSelected()) {
            updateRadius((short) -1);
        } else if(radCounterCW.isSelected()) {
            updateRadius((short) 1);
        }
    }    
    
    private void updateDriveFromSliders() {
        try {
            short vel = (short) velocitySlider.getValue();
            short rad = (short) radiusSlider.getValue();

            remoteCommand.drive(vel, rad);
            
            velocity.setText(Short.toString(vel));
            radius.setText(Short.toString(rad));
        } catch (IOException ex) {
            Logger.getLogger(ControlGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
            messageLogFrame.updateMessageLog("Error Adjusting Drive Speed: " + ex.getMessage());
        }
    }
    
    private void updateRadius(short radValue){
        try {
            short vel = (short) velocitySlider.getValue();
            remoteCommand.drive(vel, radValue);

            radius.setText(Short.toString(radValue));
            adjustedByButton = true;
            radiusSlider.setValue(radValue);
        } catch (IOException ex) {
            Logger.getLogger(ControlGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setRemoteCommand(RemoteCommand remoteCommand) {
        this.remoteCommand = remoteCommand;
                
        checkConnection();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cmLedButtonOff;
    private javax.swing.JToggleButton connectButton;
    private javax.swing.JTabbedPane controlGuiTabPane;
    private javax.swing.JPanel controlProgramPanel;
    private javax.swing.JButton driveButton;
    private javax.swing.JButton driveControlButton;
    private javax.swing.JButton driveDirectButton;
    private javax.swing.JCheckBox driveIncludeCustomSensors;
    private javax.swing.JPanel drivePanel;
    private javax.swing.JSlider driveProgramSpeed;
    private javax.swing.JCheckBox driveProgramSpeedCheck;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton exitServerButton;
    private javax.swing.JButton followWallControlButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton keyboardControlButton;
    private javax.swing.JButton ledButton;
    private javax.swing.JRadioButton ledRadio1;
    private javax.swing.JRadioButton ledRadio2;
    private javax.swing.JTextField leftDrive;
    private javax.swing.JButton messageLogButton;
    private javax.swing.JPanel otherPanel;
    private javax.swing.JRadioButton radClockwise;
    private javax.swing.JRadioButton radCounterCW;
    private javax.swing.JRadioButton radSlider;
    private javax.swing.JRadioButton radStraight;
    private javax.swing.JTextField radius;
    private javax.swing.JSlider radiusSlider;
    private javax.swing.JTextField rightDrive;
    private javax.swing.JButton sensorsButton;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton testScriptButton;
    private javax.swing.JTextField velocity;
    private javax.swing.JSlider velocitySlider;
    private javax.swing.JButton videoButton;
    // End of variables declaration//GEN-END:variables
    
    private class MessageListener extends Thread {
        public void run() {
            boolean closed = false;
            while(true){
                try {
                    String input = null;
                    input = remoteCommand.read();
                    if(input != null && input.length() > 0){
                            // TODO: Take out the System.out, its just there for debugging
                        System.out.println(input);                        
                        messageLogFrame.updateMessageLog(input);
                    }
                    closed = false;
                } catch (IOException ex) {
                    if(!closed){
                        try {
                            System.out.println("Socket Closed");
                            messageLogFrame.updateMessageLog("Socket Closed");
                            closed = true;
                            Thread.sleep(1000);
                        } catch (InterruptedException ex1) {
                            Logger.getLogger(ControlGUIFrame.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    }
                } 
            }
        }
        
    }
}
